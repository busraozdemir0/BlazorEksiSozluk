@inherits LayoutComponentBase

<div class="navbar fixed-top text-white">

    <div class="logo">
        <a href="/" class="bg-white">
            <img height="29" src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/25/Ek%C5%9Fi_S%C3%B6zl%C3%BCk_yeni_logo.svg/2560px-Ek%C5%9Fi_S%C3%B6zl%C3%BCk_yeni_logo.svg.png" />
        </a>
    </div>

    <div class="search-box">

        <div class="input-group">
            <div class="form-outline">
                <input type="search"
                       class="form-control small"
                       @bind-value="@searchText"
                       @bind-value:event="oninput"
                       @onkeypress="@SearchKeyDown"
                       @onfocusout="@OnSearchFocusOut"
                       placeholder="Sözlükte Ara" />
            </div>

            <button type="button" class="btn btn-sozluk btn-success"
                    @onclick="@Search"
                    @onfocusout="@OnSearchFocusOut">
                @* Arama butonuna basildiktan sonra input'a girilen kelimeyle başlayan entry'lerin arama listesinin kapanmasi icin *@
                <i class="fa fa-search h-75"></i>
            </button>
        </div>

        @* Arama sonuclarini gostermek icin *@

        @if (showSearchResult)
        {
            <ul class="list-group">

                @foreach (var searchItem in searchResults)
                {
                    <li class="list-group-item">
                        <a @onclick="(async()=> await GoEntry(searchItem.Id))">
                            @searchItem.Subject
                        </a>
                    </li>
                }
            </ul>
        }

    </div>

    @* Sisteme kullanicinin giris yapmis olup olmamasina gore butonlari gosterdigimiz kisim *@
    <AuthorizeView>
        @* Giris yapmissa *@
        <Authorized>
            <div class="top-nav">
                <input type="button" class="form-control btn-success btn-sozluk w-auto" value="Entry Oluştur" @onclick="@NavigateCreateEntryPage" />
                <input type="button" class="form-control btn-success btn-sozluk w-auto" value="Profilim" @onclick="@NavigateMEPage" />
                <input type="button" class="form-control btn-success btn-sozluk w-auto" value="Çıkış Yap" @onclick="@NavigateLogoutPage" />
            </div>
        </Authorized>

        @* Giris yapmamissa *@
        <NotAuthorized>
            <div class="top-nav">
                <input type="button" class="form-control btn-success btn-sozluk w-auto" value="Giriş Yap" @onclick="@NavigateLoginPage" />
            </div>
        </NotAuthorized>
    </AuthorizeView>

    <div class="sub-nav">
        <a class="sub-nav-item active">bugün</a>
        <a class="sub-nav-item">gündem</a>
        <a class="sub-nav-item">debe</a>
        <a class="sub-nav-item">sorunsallar</a>
        <a class="sub-nav-item">takip</a>
        <a class="sub-nav-item">son</a>
        <a class="sub-nav-item">kenar</a>
        <a class="sub-nav-item">çaylaklar</a>
    </div>

</div>


<div class="page">
    <div class="sidebar">
        <h5 class="text-white text-center sidebar-heading">@EntriesSubject</h5>
        <a class="more-data" @onclick="@RefreshEntries">Yenile</a>

        <ul class="list-group">
            <EntriesComponent @ref=@entriesComponent />
        </ul>

    </div>

    <main>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    public string EntriesSubject { get; set; } = "bugün";
    private EntriesComponent entriesComponent;

    [Parameter]
    public Guid UserId { get; set; }

    [Parameter]
    public string UserName { get; set; }

    private UserDetailViewModel userDetail = new();

    [Inject]
    IUserService userService { get; set; }

    [Inject]
    AuthenticationStateProvider authenticationStateProvider { get; set; } // Sisteme giris yapan kullanicinin bilgielrini alabilmek icin

    private string searchText;
    private bool showSearchResult;
    private List<SearchEntryViewModel> searchResults = new List<SearchEntryViewModel>();

    [Inject]
    NavigationManager navigationManager { get; set; }

    [Inject]
    IEntryService entryService { get; set; }

    private async Task RefreshEntries()
    {
        await entriesComponent.RefreshList();
    }

    private async Task NavigateMEPage()
    {
        UserId = await authenticationStateProvider.GetUserId(); // Sisteme giris yapan kullanicinin id'si
        userDetail = await userService.GetUserDetail(UserId); // Sisteme giris yapan kullanicinin bilgileri
        navigationManager.NavigateTo($"/profile/{userDetail.UserName}"); // Sisteme giris yapan kulanicinin userName'ini aldik
    }

    private void NavigateLoginPage()
    {
        navigationManager.NavigateTo("/login");
    }

    private void NavigateLogoutPage()
    {
        navigationManager.NavigateTo("/logout");
    }

    private void NavigateCreateEntryPage()
    {
        navigationManager.NavigateTo("/createEntry");
    }

    private async Task SearchKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Search();
        }
    }

    private async Task OnSearchFocusOut()
    {
        await Task.Delay(100); // arada 100 ms gecikme ekledik (box'in hizli bir sekilde kapanmasinin onune gecmek icin)
        if (showSearchResult)
            showSearchResult = false;
    }

    private async Task Search()
    {
        if (string.IsNullOrEmpty(searchText))
            return;

        searchResults = await entryService.SearchBySubject(searchText);

        showSearchResult = true; // Arama box'inin cikmasi icin (A yazinca A harfi ile baslayan entry'ler gelecek)

        searchText = string.Empty;
    }

    private async Task GoEntry(Guid entryId)
    {
        await OnSearchFocusOut();
        navigationManager.NavigateTo($"/entry/{entryId}");
    }
}
}
