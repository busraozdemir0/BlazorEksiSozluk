@if (entries != null && entries.Results.Count > 0)
{
    foreach (var entry in entries.Results)
    {
        @* EntryViewerComponent bir entry'i barindiran component'dir. Listelenecek tum component'ler arasinda dolasarak bu component icerisine icinde bulundugumuz entry'i gondererek ana sayfada gosterilmesini sagliyoruz *@
        <EntryViewerComponent Entry="@entry" />
        <br /> @* Her bir entry'den sonra bir bosluk birak *@
    }

    <br />
    <br />

    @* Sayfalama mekanizmasi icin bir component hazirladik ve bu componenti sayfalama yapmak istedigimiz sayfalarda kullanabiliriz *@
    <PaginationComponent TotalPage="@entries.PageInfo.TotalPageCount"
                         CurrentPage="@currentPage"
                         OnPageChanged="@OnPageChanged"/>
}


@code {
    [Inject]
    IEntryService entryService { get; set; }

    private int currentPage = 1; // sayfalama yapisi icin

    PagedViewModel<GetEntryDetailViewModel> entries;

    private async Task OnPageChanged(int pageNumber)
    {
        currentPage = pageNumber; // secilen sayfa numarasi currentPage'e ataniyor
        entries = await entryService.GetMainPageEntries(currentPage, 5); // ve entryService'den sayfalama mekanizmasi iceren metodu cagirip secilen sayfayi ve her sayfada 5 veri olmasini istiyoruz
    }

    protected override async Task OnInitializedAsync()
    {
        entries = await entryService.GetMainPageEntries(currentPage, 5);
    }
}


